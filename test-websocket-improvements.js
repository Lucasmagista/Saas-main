#!/usr/bin/env node

/**
 * Script de teste para verificar as melhorias do WebSocket
 * Simula m√∫ltiplas conex√µes para testar rate limiting e estabilidade
 */

const io = require('socket.io-client');

// Configura√ß√µes do teste
const SERVER_URL = 'http://localhost:3002';
const TOKEN = 'seu_token_jwt_aqui'; // Substitua por um token v√°lido
const NUM_CONNECTIONS = 15; // Mais que o limit de 10 para testar rate limiting
const DELAY_BETWEEN_CONNECTIONS = 100; // ms

console.log('üß™ Iniciando teste de melhorias WebSocket...\n');

async function testConnections() {
  const connections = [];
  let successfulConnections = 0;
  let rateLimitedConnections = 0;
  let errors = 0;

  console.log(`üì° Tentando criar ${NUM_CONNECTIONS} conex√µes...`);
  
  for (let i = 0; i < NUM_CONNECTIONS; i++) {
    try {
      await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_CONNECTIONS));
      
      const socket = io(SERVER_URL, {
        auth: { token: TOKEN },
        transports: ['websocket', 'polling'],
        timeout: 20000
      });

      socket.on('connect', () => {
        successfulConnections++;
        console.log(`‚úÖ Conex√£o ${i + 1} estabelecida: ${socket.id}`);
      });

      socket.on('connect_error', (err) => {
        if (err.message.includes('Rate limit')) {
          rateLimitedConnections++;
          console.log(`‚õî Conex√£o ${i + 1} bloqueada por rate limit: ${err.message}`);
        } else {
          errors++;
          console.log(`‚ùå Erro na conex√£o ${i + 1}: ${err.message}`);
        }
      });

      socket.on('disconnect', (reason) => {
        console.log(`üîå Conex√£o ${i + 1} desconectada: ${reason}`);
      });

      connections.push(socket);
    } catch (err) {
      errors++;
      console.log(`üí• Erro fatal na conex√£o ${i + 1}: ${err.message}`);
    }
  }

  // Aguarda um tempo para todas as conex√µes tentarem se estabelecer
  await new Promise(resolve => setTimeout(resolve, 5000));

  console.log('\nüìä Resultados do teste:');
  console.log(`‚úÖ Conex√µes bem-sucedidas: ${successfulConnections}`);
  console.log(`‚õî Conex√µes bloqueadas (rate limit): ${rateLimitedConnections}`);
  console.log(`‚ùå Erros: ${errors}`);
  console.log(`üéØ Total de tentativas: ${NUM_CONNECTIONS}`);

  // Verifica se o rate limiting est√° funcionando
  if (rateLimitedConnections > 0) {
    console.log('\nüéâ Rate limiting est√° funcionando corretamente!');
  } else {
    console.log('\n‚ö†Ô∏è  Rate limiting pode n√£o estar ativo ou token inv√°lido');
  }

  // Testa reconex√£o
  console.log('\nüîÑ Testando reconex√£o autom√°tica...');
  if (connections.length > 0 && connections[0].connected) {
    console.log('üîå For√ßando desconex√£o da primeira conex√£o...');
    connections[0].disconnect();
    
    // Aguarda para ver se reconecta
    setTimeout(() => {
      if (connections[0].connected) {
        console.log('‚úÖ Reconex√£o autom√°tica funcionou!');
      } else {
        console.log('‚ö†Ô∏è  Reconex√£o autom√°tica pode estar desabilitada (esperado)');
      }
    }, 3000);
  }

  // Limpa conex√µes ap√≥s 10 segundos
  setTimeout(() => {
    console.log('\nüßπ Fechando todas as conex√µes...');
    connections.forEach((socket, index) => {
      if (socket.connected) {
        socket.disconnect();
        console.log(`üîå Conex√£o ${index + 1} fechada`);
      }
    });
    console.log('\n‚ú® Teste conclu√≠do!');
    process.exit(0);
  }, 10000);
}

// Executa o teste
testConnections().catch(console.error);

console.log(`
üìã Instru√ß√µes para usar este teste:

1. Certifique-se de que o servidor backend est√° rodando na porta 3002
2. Substitua TOKEN por um JWT v√°lido do seu usu√°rio
3. Execute: node test-websocket-improvements.js
4. Observe os logs para verificar:
   - ‚úÖ Rate limiting funcionando (algumas conex√µes bloqueadas)
   - ‚úÖ Conex√µes estabelecidas corretamente  
   - ‚úÖ Logs de desconex√£o organizados
   - ‚úÖ Configura√ß√µes de timeout respeitadas

‚ö†Ô∏è  NOTA: Este teste pode gerar muitos logs. Use apenas para desenvolvimento!
`);
